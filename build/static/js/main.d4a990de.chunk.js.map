{"version":3,"sources":["Components/GlobalProps.js","Components/Structure/Header.js","Components/Structure/Information.js","Components/Data/Axios.js","Components/Structure/FormAdd.js","Components/Structure/LogInOut.js","Components/Structure/HeadTable.js","Components/Structure/Months.js","Components/Structure/Concerned.js","Components/Structure/FilteringHead.js","MainApp.js","serviceWorker.js","index.js"],"names":["headName$","BehaviorSubject","SQLDataArr$","SQLDataColsArr$","SQLFilterMonthsBtnsArr$","SQLFilterConcernedBtnsArr$","updateSQLDataArr","SQLDataArr","next","Header","useState","appName","setAppName","useEffect","subscribe","headName","console","log","value","Information","SQLFilterMonthsBtnsArr","SQLFilterConcernedBtnsArr","backendURL","axiosGet","axios","get","then","response","data","filterBtns","index","length","filterMonthsBtnStr","month","filterConcernedBtnStr","concerned","includes","push","updateSQLFilterMonthsBtnsArr","updateSQLFilterConcernedBtnsArr","saveFilterBtns","SQLDataColsArr","updateSQLDataColsArr","Object","keys","catch","error","axiosPost","postType","SQLStatementsObj","type","sendToSqlBackend","post","FormAdd","props","quantityOfSqlPosts","updateQuantityOfSqlPosts","incommingSQLDataCols","updateIncommingSQLDataCols","dateStr","updateDateStr","monthStr","updateMonhthStr","activityStr","updateActivityStr","stateStr","updateStateStr","concernedStr","updateConcernedStr","typeStr","updateTypeStr","placeStr","updatePlaceStr","contentStr","updateContentStr","setStrsType","e","target","inputStr","dataset","setAddSQLPostID","addPostId","id","style","addForm","display","className","data-type","onChange","onClick","sqlBody","getBodiesValues","values","cols","join","preventDefault","LogInOut","data-admin","runAdmin","SQLMonthsArr","SQLReferedArr","HeadTable","incommingSQLData","updateincommingSQLData","setAddForm","targetBtn","admin","marginTop","height","lineHeight","map","sqlDataObj","rowCounter","monthsStrs","referedArr","key","dateStrs","inSqlDateStr","split","cleanincomminggSQLDate","date","activity","state","place","content","Months","filtering","getFilterStr","btnStr","checkboxIndex","nrInList","checkboxName","name","data-checkboxname","sqlFiltering","htmlFor","Concerned","activeMonthsStrArr","activeConcernedStrArr","checkedMonthsArr","checkedConcernedArr","concernedArr","monthsArr","Filtering","updateActiveFilter","sqlMonthStr","sqlConcerned","targetFilterMonthsBtn","filterType","targetCheckboxName","checkboxname","targetCheckboxChecked","checked","checkFilterType","indexOf","splice","pop","getFilterObj","SQLFilterStr","filterChecked","operator","filterIn","calcCeckedMonths","calcCeckedConcerned","typeOfStatement","MainApp","Helmet","charSet","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d4a990de.chunk.js","sourcesContent":["\r\nimport {BehaviorSubject} from \"rxjs\";\r\n\r\nlet headName = '';\r\nlet SQLDataArr = [];\r\nlet SQLDataColsArr = [];\r\nlet SQLFilterMonthsBtnsArr = [];\r\nlet SQLFilterConcernedBtnsArr = [];\r\n\r\nexport const headName$ = new BehaviorSubject(headName);\r\nexport const SQLDataArr$ = new BehaviorSubject(SQLDataArr);\r\nexport const SQLDataColsArr$ = new BehaviorSubject(SQLDataColsArr);\r\n\r\nexport const SQLFilterMonthsBtnsArr$ = new BehaviorSubject(SQLFilterMonthsBtnsArr);\r\nexport const SQLFilterConcernedBtnsArr$ = new BehaviorSubject(SQLFilterConcernedBtnsArr);\r\n\r\nexport function updateHeadName(headName){\r\n    if(headName) headName$.next(headName);\r\n}\r\nexport function updateSQLDataArr(SQLDataArr){  \r\n    if(SQLDataArr) SQLDataArr$.next(SQLDataArr);\r\n}\r\nexport function updateSQLDataColsArr(SQLDataColsArr){  \r\n    if(SQLDataColsArr) SQLDataColsArr$.next(SQLDataColsArr);\r\n}\r\nexport function updateSQLFilterMonthsBtnsArr(SQLFilterMonthsBtnsArr){  \r\n    if(SQLFilterMonthsBtnsArr) SQLFilterMonthsBtnsArr$.next(SQLFilterMonthsBtnsArr);\r\n}\r\nexport function updateSQLFilterConcernedBtnsArr(SQLFilterConcernedBtnsArr){  \r\n    if(SQLFilterConcernedBtnsArr) SQLFilterConcernedBtnsArr$.next(SQLFilterConcernedBtnsArr);\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { headName$ } from '../GlobalProps.js';\r\n\r\nexport let Header = () => {\r\n    let [ appName, setAppName ] = useState('');   \r\n\r\n    useEffect(() => {\r\n        headName$.subscribe((headName) => {\r\n            console.log(headName);\r\n            setAppName(headName$.value);\r\n        });\r\n    }, []);\r\n    console.log('header');\r\n    \r\n    return (\r\n        <>\r\n            <section></section>\r\n            <section>{ appName }</section>\r\n            <section></section>\r\n        </>\r\n    );\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { headName$ } from '../GlobalProps.js';\r\n\r\nexport let Information = () => {\r\n    //let [ appName, setAppName ] = useState('');   \r\n\r\n\r\n    useEffect(() => {\r\n/*     headName$.subscribe((headName) => {\r\n       console.log(headName);\r\n        setAppName(headName$.value);\r\n    }); */\r\n    }, []);\r\n    return (\r\n        <>\r\nHej kollega!\r\n<br></br>\r\nVälj vad du vill se med knapparna till höger.\r\n<br></br><br></br>\r\nVill du lägga in aktiviteter så väljer du Berörda -> Ingen, skriver in info om aktiviteten och vem som berörs. \r\n<br></br><br></br>\r\nDu tar bort filtreringen som finns genom att trycka på \"Tratten med det röda krysset\" överst         </>\r\n    );\r\n}","import axios from 'axios';\r\nimport { updateSQLDataArr, updateSQLDataColsArr, updateSQLFilterMonthsBtnsArr,  updateSQLFilterConcernedBtnsArr } from '../GlobalProps.js';\r\n\r\nlet SQLFilterMonthsBtnsArr = [];\r\nlet SQLFilterConcernedBtnsArr = [];\r\n\r\n//let backendURL = 'http://fredrikipnrtelia.mina-projekt.se:3001'; // Pub\r\nlet backendURL = 'http://fredrikipnrtelia.mina-projekt.se:3002'; // Dev\r\nexport let axiosGet = (/* type, currentSQLStatement */) => {\r\n    axios.get(`${backendURL}/SQLData`).\r\n    then(response => {\r\n        // Store the incommingg API data in a object\r\n        console.log(response.data);\r\n        updateSQLDataArr(response.data);           \r\n        saveFilterBtns(response.data);\r\n        updateSQLDataColsArr(Object.keys(response.data[0]));            \r\n    }).\r\n    catch(error => {\r\n        //console.log(error.response);\r\n    });\r\n\r\n/*     axios.get('http://fredrikipnrtelia.mina-projekt.se:81/HBGWorksApp/index.php').\r\n    then(response => {\r\n        // Store the incommingg API data in a object\r\n        console.log(response.data);\r\n    }).\r\n    catch(error => {\r\n        //console.log(error.response);\r\n    }); */\r\n}\r\nexport let axiosPost = (postType, SQLStatementsObj) => {  \r\n    let type = '';\r\n    let sendToSqlBackend = {\r\n        SQLStatementsObj,\r\n    };\r\n    console.log(sendToSqlBackend);\r\n    if (postType === 'filter') type = 'filter';\r\n    if (postType === 'add') type = 'AddPost';\r\n    axios.post(\r\n        `${backendURL}/SQLData/${ type }`\r\n        , sendToSqlBackend ).\r\n    then(response => {\r\n        console.log(response.data);\r\n        // Update the returning sqlData table\r\n        let SQLStatementsObj = {\r\n            type: 'SELECT',\r\n            typeOfStatement: 'default',\r\n        }\r\n        if (postType !== 'add') updateSQLDataArr(response.data[0]);\r\n    }).\r\n    catch(error => {\r\n        //console.log(error.response);\r\n    });\r\n}\r\nfunction saveFilterBtns(filterBtns) {\r\n    /*\r\n    Save both the months ans the cerncerned filter Btn in a individuall\r\n    array. The arrays are sep... from the filerering funtions!\r\n    */\r\n    for (let index = 0; index < filterBtns.length; index++) {\r\n        let filterMonthsBtnStr = filterBtns[index].month;\r\n        let filterConcernedBtnStr = filterBtns[index].concerned;\r\n\r\n        // Check if the strings already is in the array \r\n        if (!SQLFilterMonthsBtnsArr.includes(filterMonthsBtnStr)) SQLFilterMonthsBtnsArr.push(filterMonthsBtnStr);\r\n        if (!SQLFilterConcernedBtnsArr.includes(filterMonthsBtnStr)) SQLFilterConcernedBtnsArr.push(filterConcernedBtnStr);\r\n    }\r\n    \r\n    updateSQLFilterMonthsBtnsArr(SQLFilterMonthsBtnsArr);\r\n    updateSQLFilterConcernedBtnsArr(SQLFilterConcernedBtnsArr);\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { SQLDataArr$, SQLDataColsArr$ } from '../GlobalProps.js';\r\nimport { axiosPost } from '../Data/Axios.js';\r\n\r\nexport let FormAdd = (props) => {        \r\n    let [ quantityOfSqlPosts, updateQuantityOfSqlPosts ] = useState(0);\r\n    let [ incommingSQLDataCols, updateIncommingSQLDataCols ] = useState([]);\r\n\r\n    //let [ idNr, updateIdNr ] = useState('');\r\n    let [ dateStr, updateDateStr ] = useState('');\r\n    let [ monthStr, updateMonhthStr ] = useState('');\r\n    let [ activityStr, updateActivityStr ] = useState('');\r\n    let [ stateStr, updateStateStr ] = useState('');\r\n    let [ concernedStr, updateConcernedStr ] = useState('');\r\n    let [ typeStr, updateTypeStr ] = useState('');\r\n    let [ placeStr, updatePlaceStr ] = useState('');\r\n    let [ contentStr, updateContentStr ] = useState('');\r\n\r\n    useEffect(() => {\r\n        SQLDataArr$.subscribe((SQLDataArr) => {      \r\n            updateQuantityOfSqlPosts(SQLDataArr.length); \r\n        });\r\n        SQLDataColsArr$.subscribe((SQLDataColsArr) => {      \r\n            updateIncommingSQLDataCols(SQLDataColsArr)    \r\n        });\r\n    }, []);\r\n    let setStrsType = (e) => {\r\n        let type = e.target;\r\n        let inputStr = type.value;            \r\n        const {dataset} = type;\r\n\r\n        if (dataset.type === 'date') updateDateStr(inputStr);\r\n        if (dataset.type === 'month') updateMonhthStr(inputStr);\r\n        if (dataset.type === 'activity') updateActivityStr(inputStr);\r\n        if (dataset.type === 'state') updateStateStr(inputStr);\r\n        if (dataset.type === 'concerned') updateConcernedStr(inputStr);\r\n        if (dataset.type === 'type') updateTypeStr(inputStr);\r\n        if (dataset.type === 'place') updatePlaceStr(inputStr);\r\n        if (dataset.type === 'content') updateContentStr(inputStr);\r\n    }\r\n    let setAddSQLPostID = () => {\r\n        let addPostId = quantityOfSqlPosts;\r\n        addPostId++;\r\n        \r\n        return addPostId;\r\n    }\r\n\r\n    let submitAddForm = (e) => {\r\n        let sqlBody = {\r\n            [incommingSQLDataCols[0]]: `'${ setAddSQLPostID() }'`,\r\n            [incommingSQLDataCols[1]]: `'${ dateStr}'`,\r\n            [incommingSQLDataCols[2]]: `'${ monthStr }'`,\r\n            [incommingSQLDataCols[3]]: `'${ activityStr }'`,\r\n            [incommingSQLDataCols[4]]: `'${ stateStr }'`,\r\n            [incommingSQLDataCols[5]]: `'${ concernedStr }'`,\r\n            [incommingSQLDataCols[6]]: `'${ typeStr }'`,\r\n            [incommingSQLDataCols[7]]: `'${ placeStr }'`,\r\n            [incommingSQLDataCols[8]]: `'${ contentStr}'`,\r\n        };\r\n        let getBodiesValues = Object.values(sqlBody);\r\n        \r\n        axiosPost(\r\n            'add', {\r\n                cols: `(${ incommingSQLDataCols.join(', ')})`,\r\n                data: `(${ getBodiesValues.join()});`,\r\n            }\r\n        );\r\n        e.preventDefault();\r\n    }\r\n    console.log();\r\n    \r\n    return (\r\n        <form>\r\n            <table id=\"addSqlData\" style={(props.addForm === true) ? {display: 'block'} : {display: 'none'}}>\r\n                <tbody>\r\n                    <tr>\r\n                        <td className=\"tableCol1\">{ setAddSQLPostID() }</td>\r\n                        <td><input type=\"text\" className=\"addSqlInput\" data-type=\"date\" onChange={ setStrsType }/></td>\r\n                        <td><input type=\"text\" className=\"addSqlInput\" data-type=\"month\" onChange={ setStrsType }/></td>\r\n                        <td className=\"tableCol4\"><input type=\"text\" className=\"addSqlInput\" data-type=\"activity\" onChange={ setStrsType }/></td>\r\n                        <td><input type=\"text\" className=\"addSqlInput\" data-type=\"state\" onChange={ setStrsType }/></td>\r\n                        <td><input type=\"text\" className=\"addSqlInput\" data-type=\"concerned\" onChange={ setStrsType }/></td>\r\n                        <td><input type=\"text\" className=\"addSqlInput\" data-type=\"type\" onChange={ setStrsType }/></td>\r\n                        <td><input type=\"text\" className=\"addSqlInput\" data-type=\"place\" onChange={ setStrsType }/></td>\r\n                        <td className=\"tableCol9\"><input type=\"text\" className=\"addSqlInput\" data-type=\"content\" onChange={ setStrsType }/></td>\r\n                        <td><input type=\"submit\" className=\"button addFormBtn\" onClick={ submitAddForm } value=\"Lägg till!\"/></td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>     \r\n        </form>        \r\n    );\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { FormAdd } from './FormAdd.js';\r\n\r\nimport { isArray } from 'util';\r\n\r\nexport let LogInOut = (props) => {\r\n    return (\r\n        <>\r\n            <section>\r\n                {( props.addForm === false) \r\n                    ?\r\n                        <button className=\"button adminBtn\" data-admin=\"logIn\" onClick={ props.runAdmin }>\r\n                            <p id=\"logInOut__heaflineStr\" data-admin=\"logIn\" onClick={ props.runAdmin }>Login</p>\r\n                            <section id=\"logInOut__inputContainer\" data-admin=\"logIn\" onClick={ props.runAdmin }>\r\n                                <section id=\"inputContainer__userName\" data-admin=\"logIn\" onClick={ props.runAdmin }>\r\n                                    <p id=\"userName__str\" data-admin=\"logIn\" onClick={ props.runAdmin }>Användarnamn</p>\r\n                                    <i className=\"material-icons icons__userName\" data-admin=\"logIn\" onClick={ props.runAdmin }>arrow_right</i>\r\n                                    <input type=\"Text\" className=\"logInOut__inputUserName\" />\r\n                                </section>\r\n                                <section id=\"inputContainer__pwd\" data-admin=\"logIn\" onClick={ props.runAdmin }>\r\n                                    <p id=\"pwd__str\" data-admin=\"logIn\" onClick={ props.runAdmin }>Lösenord</p>\r\n                                    <i className=\"material-icons icons__pwd\" data-admin=\"logIn\" onClick={ props.runAdmin }>arrow_right</i>\r\n                                    <input type=\"Text\" className=\"logInOut__inputPwd\"/>    \r\n                                </section>                         \r\n                            </section>    \r\n                        </button>   \r\n                    :\r\n                        <button className=\"button adminBtn\" data-admin=\"logOut\" onClick={ props.runAdmin }>\r\n                            <p id=\"logInOut__heaflineStr\" data-admin=\"logOut\" onClick={ props.runAdmin }>Logout</p>\r\n                        </button>\r\n                }\r\n            </section>\r\n            <FormAdd\r\n                addForm={ props.addForm }\r\n                setAddSQLPostID={ props.setAddSQLPostID }\r\n            />\r\n        </>\r\n    );\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { SQLDataArr$ } from '../GlobalProps.js';\r\nimport { LogInOut } from './LogInOut.js';\r\nimport { axiosGet } from '../Data/Axios.js';\r\n\r\nimport '../CSS/Table.css';\r\n\r\nimport axios from 'axios';\r\nimport { log } from 'util';\r\n\r\nlet SQLMonthsArr = [];\r\nlet SQLReferedArr = [];\r\nlet auth = {\r\n    userName: '',\r\n    password: ''\r\n}\r\nexport let HeadTable = () => {\r\n    let [ incommingSQLData, updateincommingSQLData ] = useState([]);\r\n    let [ addForm, setAddForm ] = useState(true);\r\n\r\n    useEffect(() => {\r\n        // Run default SQL list\r\n/*         let SQLStatementsObj = {\r\n            type: 'SELECT',\r\n            typeOfStatement: 'default',\r\n        }\r\n */\r\n        axiosGet();\r\n        //correctSQLStatements(SQLStatementsObj);\r\n        SQLDataArr$.subscribe((SQLDataArr) => {\r\n            updateincommingSQLData(SQLDataArr);\r\n        });\r\n    }, []);\r\n    let runAdmin = (e) => {\r\n        let targetBtn = e.target.dataset.admin;\r\n        if (targetBtn === 'logIn') setAddForm(true);\r\n        if (targetBtn === 'logOut') setAddForm(false);\r\n    }\r\n    let cleanincomminggSQLDate = (dateStrs) => {\r\n\r\n        let inSqlDateStr = dateStrs.split('-');\r\n        let cleanedDate = dateStrs.split('-')[0] + '-' + inSqlDateStr[1] + '-' + inSqlDateStr[2].split('')[0] + inSqlDateStr[2].split('')[1];\r\n        return cleanedDate;\r\n    }    \r\n    return (\r\n        <>\r\n            <LogInOut\r\n                runAdmin={ runAdmin}\r\n                addForm={ addForm }\r\n            />\r\n            <table id=\"tableSchedule\" style={(addForm === true) ? {marginTop: '-62px'} : null}>\r\n                <thead>\r\n                    <tr>\r\n                        <th className=\"tableCol1\">ID</th>\r\n                        <th>Datum</th>\r\n                        <th>Månad</th>\r\n                        <th className=\"tableCol4\">Akitvitet</th>\r\n                        <th>Status</th>\r\n                        <th>Berörda</th>\r\n                        <th>Typ</th>\r\n                        <th>Plats</th>\r\n                        <th className=\"tableCol9\">Innehåll</th>\r\n                        <th style={(addForm === true) ? {display: 'block',  height: '27px', lineHeight: '27px'} : {display: 'none'}}>Verktyg</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody id=\"tableScheduleBody\" style={(addForm === true) ? {marginTop: '80px'} : null}>\r\n                    {(incommingSQLData.length !== 0) \r\n                        ?\r\n                            incommingSQLData.map((sqlDataObj, rowCounter) => {\r\n                                let monthsStrs = sqlDataObj.month;\r\n                                let referedArr = sqlDataObj.concerned;\r\n                                \r\n                                SQLMonthsArr.push(monthsStrs);\r\n                                SQLReferedArr.push(referedArr);\r\n                               //console.log(sqlDataObj);\r\n                                \r\n                                return(\r\n                                    <tr key={ rowCounter }>\r\n                                        <td className=\"tableCol1\">{ sqlDataObj.id }</td>\r\n                                        <td>{ cleanincomminggSQLDate(sqlDataObj.date) }</td>\r\n                                        <td>{ sqlDataObj.month }</td>\r\n                                        <td className=\"tableCol4\">{ sqlDataObj.activity }</td>\r\n                                        <td>{ sqlDataObj.state }</td>\r\n                                        <td>{ sqlDataObj.concerned }</td>\r\n                                        <td>{ sqlDataObj.type }</td>\r\n                                        <td>{ sqlDataObj.place }</td>\r\n                                        <td className=\"tableCol9\">{ sqlDataObj.content }</td>\r\n                                        <td style={(addForm === true) ? {display: 'block'} : {display: 'none'}}>X</td>\r\n                                    </tr>\r\n                                );\r\n                            })\r\n                        :   <tr>\r\n                                <td><p>Datan laddas in.... </p></td>\r\n                            </tr>\r\n                    }\r\n                    <tr>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n        </>\r\n    );\r\n\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport '../CSS/Interigate.css';\r\n\r\nexport let Months = (props) => {\r\n    let [ filtering ] = useState('month');\r\n    let [ presentStr, updatePresentStr ] = useState([]);\r\n\r\n    useEffect(() => {\r\n\r\n    });\r\n    return ( \r\n        <>\r\n            <p className=\"nav__headline\" >Månader</p>            \r\n            <section className=\"navButtonsMonth\">\r\n                {( props.getFilterStr(filtering).length !== 0)\r\n                    ?\r\n                    props.getFilterStr(filtering).map((btnStr, checkboxIndex) => {        \r\n                            let nrInList = checkboxIndex+1;\r\n                            let checkboxName = btnStr;\r\n                            return(\r\n                                <section key={ nrInList } className=\"container__checkboxMonth\">\r\n                                    <input\r\n                                        key={ 'inputs' + nrInList }\r\n                                        type=\"checkbox\" \r\n                                        name=\"month\"\r\n                                        className=\"checkbox__input\"\r\n                                        id={ 'checkbox__input' + nrInList }\r\n                                        data-checkboxname={ checkboxName } \r\n                                        onClick={ props.sqlFiltering }\r\n                                    />\r\n                                    <label htmlFor={'checkbox__input' + nrInList }  key={ 'label' + nrInList } className=\"checkbox__labelMonth\" id={'checkbox__label' + nrInList }>{ btnStr }</label>\r\n                                </section>\r\n                            );\r\n                        })\r\n                    :   <p>Datan laddas in.... </p>\r\n                }\r\n            </section>\r\n        </>\r\n    );\r\n}","import React, { useState,  } from 'react';\r\nimport '../CSS/Interigate.css';\r\n\r\nexport let Concerned = (props) => {\r\n    let [ filtering ] = useState('concerned');\r\n    return (\r\n        <>\r\n            <p className=\"nav__headline\">Berörda</p>            \r\n            <section className=\"navButtonsConcerned\">\r\n                {( props.getFilterStr(filtering).length !== 0)\r\n                    ?\r\n                    props.getFilterStr(filtering).map((btnStr, checkboxIndex) => {        \r\n                            let nrInList = checkboxIndex+1;\r\n                            let checkboxName = btnStr;\r\n                            return(\r\n                                <section key={ nrInList } className=\"container__checkboxConcerned\">\r\n                                    <input\r\n                                        key={ 'inputs' + nrInList }\r\n                                        type=\"checkbox\"\r\n                                        name=\"concerned\"\r\n                                        className=\"checkbox__input\"\r\n                                        id={ 'checkbox__input' + nrInList }\r\n                                        data-checkboxname={ checkboxName } \r\n                                        onClick={ props.sqlFiltering }\r\n                                    />\r\n                                    <label htmlFor={'checkbox__input' + nrInList }  key={ 'label' + nrInList } className=\"checkbox__labelConcerned\" id={'checkbox__label' + nrInList }>{ btnStr }</label>\r\n                                </section>\r\n                            );\r\n                        })\r\n                    :   <p>Datan laddas in.... </p>\r\n                }\r\n            </section>\r\n        </>\r\n    );\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { axiosPost } from '../Data/Axios.js';\r\nimport { SQLDataArr$ } from '../GlobalProps.js';\r\nimport { Months } from './Months.js';\r\nimport { Concerned } from './Concerned.js';\r\n\r\nlet activeMonthsStrArr = [];\r\nlet activeConcernedStrArr = [];\r\n\r\nlet checkedMonthsArr = [];\r\nlet checkedConcernedArr = [];\r\n\r\nlet concernedArr = [];\r\nlet monthsArr = [];\r\n\r\nlet SQLStatementsObj = {};\r\nexport let Filtering = () => {\r\n    let [ incommingSQLData, updateincommingSQLData ] = useState([]);\r\n    let [ activeFilter, updateActiveFilter ] = useState(false);\r\n\r\n    useEffect(() => {\r\n        SQLDataArr$.subscribe((SQLDataArr) => {\r\n           // console.log(SQLDataArr);\r\n            updateincommingSQLData(SQLDataArr);\r\n        });\r\n    }, []);\r\n    let getFilterStr = (filtering) => {\r\n        /* \r\n            Check if the incommingg str is found in the array, if the string is found. \r\n            The stirng is add else not added \r\n        */\r\n        for (let index = 0; index < incommingSQLData.length; index++) {\r\n            let sqlMonthStr = incommingSQLData[index].month;\r\n            let sqlConcerned = incommingSQLData[index].concerned;\r\n    \r\n            if (!monthsArr.includes(incommingSQLData[index].month)) monthsArr.push(sqlMonthStr);\r\n            if (!concernedArr.includes(incommingSQLData[index].concerned)) concernedArr.push(sqlConcerned);\r\n        }\r\n        if (filtering === 'month') return monthsArr;\r\n        if (filtering === 'concerned') return concernedArr;\r\n    }\r\n        /*\r\n        * If the filtered months is checked the text and the background i turn according the css roule (If checked)!\r\n        * The function at the end is running to filter the table according the month/s\r\n    */\r\n\r\n    let sqlFiltering = (e) => {\r\n        updateActiveFilter(true); \r\n        // Gets the element\r\n        let targetFilterMonthsBtn = e.target;          \r\n\r\n        // Gets element´s name\r\n        let filterType = targetFilterMonthsBtn.name;    \r\n\r\n        // Set all of the name values as a object   \r\n        const {dataset} = targetFilterMonthsBtn;    \r\n\r\n        console.log(dataset);\r\n\r\n        let targetCheckboxName = dataset.checkboxname;\r\n        \r\n        // Add and remove filtering string by the checked or unchecked checlboxies\r\n        let targetCheckboxChecked = targetFilterMonthsBtn.checked;\r\n        checkFilterType(filterType, targetCheckboxChecked, targetCheckboxName);\r\n    }\r\n    let checkFilterType = (filterType, targetCheckboxChecked, targetCheckboxName) => {\r\n        /*\r\n            If month or concerned and if checkbox is check send the string/boolean to a respectively array. If checkbox is uncheck\r\n            Remove the respectivelu balue of string and send false to the array who showuing the active filter.\r\n        */\r\n         if (filterType === 'month') {\r\n            // Check if something is checked=Marked\r\n            if (targetCheckboxChecked === true){\r\n                activeMonthsStrArr.push(targetCheckboxName);\r\n                checkedMonthsArr.push(true);\r\n            }\r\n            if (targetCheckboxChecked !== true) {\r\n                let checkboxIndex = activeMonthsStrArr.indexOf(targetCheckboxName);            \r\n                activeMonthsStrArr.splice(checkboxIndex, 1);\r\n                checkedMonthsArr.pop(true);\r\n                updateActiveFilter(false);\r\n            }\r\n            getFilterObj(activeMonthsStrArr.join(\"', '\"), filterType);\r\n    }\r\n        if (filterType === 'concerned') {\r\n            // Check if something is checked=Marked\r\n            if (targetCheckboxChecked === true){\r\n                activeConcernedStrArr.push(targetCheckboxName);\r\n                checkedConcernedArr.push(true);\r\n            }\r\n            if (targetCheckboxChecked !== true) {\r\n                let checkboxIndex = activeMonthsStrArr.indexOf(targetCheckboxName);            \r\n                activeConcernedStrArr.splice(checkboxIndex, 1);\r\n                checkedConcernedArr.pop(true);\r\n                updateActiveFilter(false);\r\n            // =========================================================================================================================\r\n            }\r\n            /* Triggering the function and send two attributes:\r\n                1 = Turn the array into a string array separate by comma\r\n                2 = The current filterType to filet on\r\n            */\r\n            getFilterObj(activeConcernedStrArr.join(), filterType);              \r\n        }\r\n    }\r\n    \r\n    let getFilterObj = (SQLFilterStr, filterType) => {     \r\n        if (filterChecked() === false){\r\n            axiosPost(\r\n                'filter', {\r\n                    filterType: 'default',\r\n                }\r\n            );\r\n        } \r\n        if (filterChecked() === true){\r\n            axiosPost(\r\n                'filter', {\r\n                    filterType: 'filter',\r\n                    operator: 'WHERE NOT',\r\n                    filterIn: filterType,\r\n                    SQLFilterStr: SQLFilterStr\r\n                }\r\n            );\r\n        }\r\n    }\r\n    let filterChecked = ()  => {\r\n        let filterChecked = false;\r\n        let calcCeckedMonths = checkedMonthsArr.length;\r\n        let calcCeckedConcerned = checkedConcernedArr.length;\r\n\r\n        if (calcCeckedMonths === 0 && calcCeckedConcerned === 0) filterChecked = false;\r\n        if (calcCeckedMonths > 0 || calcCeckedConcerned > 0) filterChecked = true;\r\n        console.log(filterChecked);\r\n        \r\n        return filterChecked;\r\n    }\r\n\r\n    let sqlFilterRemove = () => {\r\n        SQLStatementsObj = {\r\n            type: 'select',\r\n            typeOfStatement: 'default',\r\n        }\r\n        //correctSQLStatements(SQLStatementsObj);\r\n    }\r\n    console.log(SQLStatementsObj);\r\n    \r\n    return(\r\n        <>\r\n        <section className=\"navFrame\">\r\n           <button className=\"button filterRemove\" onClick={ sqlFilterRemove }>\r\n                <section className=\"ikonFilterRemove\"> \r\n                    <i className=\"material-icons\">filter_list <span className=\"filterCrossRemove\">X</span></i>\r\n                </section>\r\n            </button>\r\n            <section className=\"navFrame__month\">\r\n                <Months\r\n                   sqlFiltering={ sqlFiltering }\r\n                   getFilterStr={ getFilterStr }\r\n                />\r\n            </section>\r\n            <section className=\"navFrame__concerned\">\r\n                <Concerned\r\n                    sqlFiltering={ sqlFiltering }\r\n                    getFilterStr={ getFilterStr }\r\n                />\r\n            </section>\r\n          </section>\r\n        </>\r\n    )\r\n} ","import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport {Helmet} from \"react-helmet\";\r\nimport { updateHeadName } from './Components/GlobalProps.js';\r\n\r\nimport { Header } from './Components/Structure/Header.js';\r\nimport { Information } from './Components/Structure/Information.js';\r\nimport { HeadTable } from './Components/Structure/HeadTable.js';\r\nimport { Filtering } from './Components/Structure/FilteringHead.js';\r\n\r\nlet MainApp = () => {\r\n  let [ appName, setAppName ] = useState('WorkshoppSchema');  \r\n  useEffect(() => {\r\n\r\n    updateHeadName(appName);\r\n  }, []);\r\n\r\n  \r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <meta charSet=\"utf-8\" />\r\n        <title>{ appName }</title>\r\n      </Helmet>\r\n      <header className=\"header\">\r\n        <Header/>\r\n      </header>\r\n      <section className=\"infoNav\">\r\n        <section className=\"infoNav__info\">\r\n          <Information/>\r\n        </section>\r\n        <nav className=\"infoNav__nav\">\r\n          <Filtering/>\r\n        </nav>\r\n      </section>    \r\n      <hr id=\"hrLine\"></hr>\r\n      <main id=\"mainContainer\">\r\n      <HeadTable/>\r\n      </main>\r\n      <footer>\r\n      </footer>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default MainApp;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n         console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n             console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n             console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n     console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './Components/CSS/Head.css';\nimport MainApp from './MainApp';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<MainApp />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}